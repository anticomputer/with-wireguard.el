* with-wireguard.el: elisp library for working with wireguard network namespaces

with-wireguard.el provides primitives for managing a wireguard vpn inside a
dedicated network namespace, this is useful to e.g. spawn a browser or
terminal that requires access to certain network resources, without affecting
any routing on main network namespace

#+html:<p align="center"><img src="img/with-wireguard.png"/></p>

* Usage

Put with-wireguard.el in your ~load-path~ and ~(require 'with-wireguard)~

You can start an application inside a network namespace with a given wireguard
configuration using ~M-x with-wg-execute RET~

To remove the namespace after you're done with the application you can use the
~ip netns list~ and ~ip netns delete~ commands, respectively.

Programmatically, you can use the ~with-wg--deflate-ns~ function.

* Example

My personal configuration provides an example of a simple application launcher
for a wireguard network namespace, as well as a simple fetcher. Both use the
auto deflate flag which will automatically teardown the namespace when command
exits.

#+begin_src emacs-lisp
(use-package with-wireguard
  :quelpa (with-wireguard :fetcher github :repo "anticomputer/with-wireguard.el")
  :ensure t
  :demand
  :config
  ;; this uses the auto-deflate-ns toggle to automatically teardown on exit
  (defun my/with-wg-proton-xterm ()
    (interactive)
    (let ((xterm (executable-find "xterm"))
          (namespace
           (with-wg-execute
            "~/emacs/vpn/protonvpn/wireguard/proton-wireguard.conf"
            (format "%s" xterm) t)))
      (message "Spawning xterm in %s" namespace)))

  ;; fetcher
  (defun my/with-wg-proton-fetch (uri)
    (interactive "MFetch with wireguard (uri): ")
    (let* ((curl (executable-find "curl"))
           (namespace
            (with-wg-execute
             "~/emacs/vpn/protonvpn/wireguard/proton-wireguard.conf"
             ;; wait a tiny bit for the link to init
             (format "sleep 0.5 && %s -s -O --output-dir /home/bas/Downloads -- %s"
                     curl
                     (shell-quote-argument uri))
             t)))
      (message "Spawning curl in %s" uri namespace))))
#+end_src

You could compose more involved state management on top of the primitives
provided by with-wireguard.el but for my personal use I generally just want to
spawn a single application within a given vpn, without affecting my main
system network routing.

* Licensing

This is free and unencumbered software released into the public domain.
